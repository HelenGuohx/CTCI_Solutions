Minesweeper: Design and implement a text-based Minesweeper game. Minesweeper is the classic
single-player computer game where an NxN grid has B mines (or bombs) hidden across the grid.The
remaining cells are either blank or have a number behind them.The numbers reflect the number of
bombs in the surrounding eight cells. The user then uncovers a cell. If it is a bomb, the player loses.
If it is a number, the number is exposed. If it is a blank cell, this cell and all adjacent blank cells (up to
and including the surrounding numeric cells) are exposed. The player wins when all non-bomb cells
are exposed. The player can also flag certain places as potential bombs. This doesn't affect game
play, other than to block the user from accidentally clicking a cell that is thought to have a bomb
(Tip for the reader: if you're not familiar with this game, please play a few rounds online first.)

grid
mines

number: number of bombs surrouding 8 cells

uncover a cell
if bomb: lose
if number, number
if blank, the cell and adjacent blank cells exposed
when all non-bomb cells exposed, win

flag potential bombs.

a player plays on one game
the game is played by one player
game has nxn cells
a player can uncover one cell each time


playerCommand
enum command {flag, }
---
row: int
col: int
command:

Cell
---
row: int
col: int
cellType: CellType
cellValue: int
isExposed: boolean
isFlagged: boolean
exposeCell(): boolean
toggleFlag: boolean

enum CellType{
    BLANK,
    NUMBER,
    BOMB

}




Game
---
GameState: enum, WIN, LOSE, PLAYING
state: GameState
nrows: int
ncols: int
nbombs: int
grid: Grid

initialize()
start()
playGame()//loop until game is over

GRID
---
nrows: int
ncols: int
nbombs: int
bombs: BombCell[]
grid: Cell[][]
numNonBomb =

gridInit()
//init grid in constructor
//generate bomb cells
//generate blank and number cells
loop though cells in grid
if cell is not null

    if random.randint < 0.5
        generate blank cells
    else
        generate number cells

printGrid(): void
flipCell(Cell): boolean
playFlip(player): GameState
flipAdjacentCell(Cell){
}








